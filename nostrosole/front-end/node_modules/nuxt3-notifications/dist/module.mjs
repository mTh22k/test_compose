import { fileURLToPath } from 'url';
import { pascalCase } from 'scule';
import { defineNuxtModule, useLogger, createResolver, addImports, addTemplate, addPlugin } from '@nuxt/kit';

const PACKAGE_NAME = "nuxt-notifications";
const module = defineNuxtModule({
  meta: {
    name: PACKAGE_NAME,
    configKey: "nuxtNotifications",
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  defaults: {
    componentName: "NuxtNotifications"
  },
  setup(options, nuxt) {
    const logger = useLogger(PACKAGE_NAME);
    let { componentName } = options;
    componentName = pascalCase(componentName);
    logger.info("Starting setup");
    const { resolve } = createResolver(import.meta.url);
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    nuxt.options.runtimeConfig = {
      ...nuxt.options.runtimeConfig || {},
      public: {
        ...nuxt.options.runtimeConfig.public || {},
        nuxtNotifications: { componentName }
      }
    };
    addImports({
      name: "useNotification",
      from: "@kyvg/vue3-notification"
    });
    addTemplate({
      filename: "nuxt-notifications.d.ts",
      src: resolve("../templates/nuxt-notifications.ejs"),
      options: { componentName }
    });
    nuxt.hook("prepare:types", (options2) => {
      options2.references.push({ path: "nuxt-notifications.d.ts" });
    });
    addPlugin({
      mode: nuxt.options.ssr ? "all" : "client",
      src: resolve(runtimeDir, "plugin")
    });
    logger.success("Setup end");
  }
});

export { module as default };
